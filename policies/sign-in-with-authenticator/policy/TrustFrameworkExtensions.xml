<?xml version="1.0" encoding="utf-8"?>
<TrustFrameworkPolicy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" PolicySchemaVersion="0.3.0.0" 
TenantId="yourtenant.onmicrosoft.com" 
PolicyId="B2C_1A_Authenticator_TrustFrameworkExtensions" 
PublicPolicyUri="http://yourtenant.onmicrosoft.com/B2C_1A_Authenticator_TrustFrameworkExtensions">
  <BasePolicy>
    <TenantId>yourtenant.onmicrosoft.com</TenantId>
    <PolicyId>B2C_1A_TrustFrameworkBase</PolicyId>
  </BasePolicy>

  <BuildingBlocks>

    <ClaimsSchema>

      <ClaimType Id="usingAuthenticator">
        <DisplayName>User is using Authenticator</DisplayName>
        <DataType>boolean</DataType>
        <UserHelpText />
      </ClaimType>

      <!-- Demo: The app code user provided-->
      <ClaimType Id="strongAuthenticationAppCode">
        <DisplayName>Enter Verification Code</DisplayName>
        <DataType>string</DataType>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <!-- Demo: the QR code for app registrations-->
      <ClaimType Id="strongAuthenticationAppQRCodeBitmap">
        <DisplayName>Verified App QR Code Bitmap</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Readonly</UserInputType>
      </ClaimType>
      <!-- Demo: Stores the user secret Key in Azure Active Directory user account
      This secret is generated by the REST API-->
      <ClaimType Id="extension_StrongAuthenticationAppSecretKey">
        <DisplayName>Verified App Secret Key</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Readonly</UserInputType>
      </ClaimType>
      <!-- Demo: Stores the user last matched in Azure Active Directory user account.
      We use the attribute to prevent and verify the verification code has already been used.-->
      <ClaimType Id="extension_StrongAuthenticationAppTimeStepMatched">
        <DisplayName>Verified App Time Step Matched</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <!-- the text is presented in a <p></p> and javascript modifies the []() into an <a href link >, so if you change the PolicyId, change this too -->
      <ClaimType Id="pickYourAccountText">
        <DisplayName>To signin with the Authenticator app, please enter your account. Need to setup the Authenticator? [Enroll here](B2C_1A_Authenticator_SignUp_SignIn_enroll)</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Paragraph</UserInputType>
      </ClaimType>
      <ClaimType Id="strongAuthenticationChallangeText">
        <DisplayName>To approve sign in, please follow the instructions on your phone and enter the number you see below</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Paragraph</UserInputType>
      </ClaimType>
      <ClaimType Id="isEnrolledInAuthenticator">
        <DisplayName>If user is enrolled in authenticator</DisplayName>
        <DataType>boolean</DataType>
        <UserInputType>CheckboxMultiSelect</UserInputType>
      </ClaimType>
      <ClaimType Id="unregisterFromAuthenticator">
        <DisplayName></DisplayName>
        <DataType>string</DataType>
        <UserInputType>CheckboxMultiSelect</UserInputType>
        <Restriction>
          <Enumeration Text="Check to unregister from Authenticator" Value="False" />
        </Restriction>
      </ClaimType>
    </ClaimsSchema>

    <ClaimsTransformations>
      <ClaimsTransformation Id="AssertEnrolledInAuthenticator" TransformationMethod="AssertBooleanClaimIsEqualToValue">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="isEnrolledInAuthenticator" TransformationClaimType="inputClaim" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="valueToCompareTo" DataType="boolean" Value="true" />
        </InputParameters>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CheckIfEnrolledInAuthenticator" TransformationMethod="DoesClaimExist">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" TransformationClaimType="inputClaim" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="isEnrolledInAuthenticator" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>

      <ClaimsTransformation Id="UnregisterStrongAuthenticationKey" TransformationMethod="NullClaim">
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" TransformationClaimType="claim_to_null" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="UnregisterStrongAuthenticationTime" TransformationMethod="NullClaim">
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" TransformationClaimType="claim_to_null" />
        </OutputClaims>
      </ClaimsTransformation>

    </ClaimsTransformations>

    <ContentDefinitions>
      <!-- Demo: The following content definition is used for registering a verification app.
      This HTML5 page, reads the QR code and presents image user can scan.
      Note: the paged run JavaScript. Use custom or shared domain to allow running client side code -->
      <ContentDefinition Id="api.selfasserted.authenticator.registration">
        <!--<LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>-->
        <LoadUri>https://yourstorageaccount.blob.core.windows.net/uxcust/passwordless/selfasserted.authenticator.registration.html</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">App Factor</Item>
        </Metadata>
      </ContentDefinition>
      <!-- we use our own page here as we have javascript that dynamically creates the <a hred > for Enroll Here (see above ClaimsType pickYourAccountText)-->
      <ContentDefinition Id="api.selfasserted.authenticator">
        <LoadUri>https://yourstorageaccount.blob.core.windows.net/uxcust/passwordless/selfasserted.authenticator.html</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Collect information from user page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.selfasserted">
        <LoadUri>https://yourstorageaccount.blob.core.windows.net/uxcust/passwordless/unified.html</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Collect information from user page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.signuporsignin">
        <LoadUri>https://yourstorageaccount.blob.core.windows.net/uxcust/passwordless/unified.html</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:unifiedssp:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Signin and Signup</Item>
        </Metadata>
      </ContentDefinition>
      <!-- This content definition is to render an error page that displays unhandled errors. -->
      <ContentDefinition Id="api.error">
        <LoadUri>~/tenant/templates/AzureBlue/exception.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:globalexception:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Error page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.idpselections">
        <LoadUri>~/tenant/templates/AzureBlue/idpSelector.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:providerselection:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Idp selection page</Item>
          <Item Key="language.intro">Sign in</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.idpselections.signup">
        <LoadUri>~/tenant/templates/AzureBlue/idpSelector.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:providerselection:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Idp selection page</Item>
          <Item Key="language.intro">Sign up</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.selfasserted.profileupdate">
        <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Collect information from user page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.localaccountsignup">
        <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local account sign up page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.localaccountpasswordreset">
        <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:1.2.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local account change password page</Item>
        </Metadata>
      </ContentDefinition>
    </ContentDefinitions>
  </BuildingBlocks>

  <ClaimsProviders>

    <!-- Facebook claims provider - although we don't use fb -->
    <ClaimsProvider>
      <DisplayName>Facebook</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="Facebook-OAUTH">
          <Metadata>
            <Item Key="client_id">1234567890</Item>
            <Item Key="scope">email public_profile</Item>
            <Item Key="ClaimsEndpoint">https://graph.facebook.com/me?fields=id,first_name,last_name,name,email</Item>
          </Metadata>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <ClaimsProvider>
      <DisplayName>Local Account SignIn</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="login-NonInteractive">
          <Metadata>
            <!--Demo action required: Change to your ProxyIdentityExperienceFramework App Id-->
            <Item Key="client_id">ProxyIdentityExperienceFramework App Id</Item>
            <!--Demo action required: Change to your IdentityExperienceFramework App Id-->
            <Item Key="IdTokenAudience">IdentityExperienceFramework App Id</Item>
          </Metadata>
          <InputClaims>
            <!--Demo action required: Change to your ProxyIdentityExperienceFramework App Id-->
            <InputClaim ClaimTypeReferenceId="client_id" DefaultValue="ProxyIdentityExperienceFramework App Id" />
            <!--Demo action required: Change to your IdentityExperienceFramework App Id-->
            <InputClaim ClaimTypeReferenceId="resource_id" PartnerClaimType="resource" DefaultValue="IdentityExperienceFramework App Id" />
          </InputClaims>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <ClaimsProvider>
      <DisplayName>Azure Active Directory Store</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="AAD-Common">
          <DisplayName>Azure Active Directory</DisplayName>
          <!--  Demo action required: Provide objectId and appId before using extension properties.
                For more information: https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-create-custom-attributes-profile-edit-custom 
                Action required: Insert objectId and appId here -->
          <Metadata>
            <Item Key="ClientId">your b2c-extensions AppId</Item>
            <Item Key="ApplicationObjectId">your b2c-extensions ObjectId</Item>
          </Metadata>
        </TechnicalProfile>
        <!-- Demo: The following technical profile updates the verification app for a user, identified by the object identifier for the user,
             in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AAD-WriteUserAppCodeByObjectId">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <PersistedClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>

        <TechnicalProfile Id="AAD-DeleteUserAppCodeByObjectId">
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="UnregisterStrongAuthenticationKey" />
            <InputClaimsTransformation ReferenceId="UnregisterStrongAuthenticationTime" />
          </InputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-WriteUserAppCodeByObjectId" />
        </TechnicalProfile>

        <!-- Demo: The following technical profile is used to read data after user authenticates.
        We overwrite existing technical profile defined in the base policy. Adding Authenticator output claims-->
        <TechnicalProfile Id="AAD-UserReadUsingObjectId">
          <OutputClaims>
            <!--Demo: Read Authenticator Azure Active Directory extension attributes -->
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </OutputClaims>
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserReadUsingEmailAddress-TOTP">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">An account could not be found for the provided user ID or the account is not enrolled for using an Authenticator app.</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.emailAddress" Required="true" />
          </InputClaims>
          <OutputClaims>
            <!-- Required claims -->
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
            <!-- Optional claims -->
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="displayName" />
            <OutputClaim ClaimTypeReferenceId="accountEnabled" />
            <OutputClaim ClaimTypeReferenceId="otherMails" />
            <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CheckIfEnrolledInAuthenticator" />
            <OutputClaimsTransformation ReferenceId="AssertEnrolledInAuthenticator" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- Local Account Signin with Authenticator -->
    <ClaimsProvider>
      <DisplayName>Local Account Signin with Authenticator</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="LocalAccountSignUpWithLogonEmail">
          <Metadata>
            <Item Key="EnforceEmailVerification">True</Item>
          </Metadata>
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountDiscoveryUsingEmailAddress-TOTP">
          <DisplayName>Signin with Authenticator</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.authenticator</Item>
            <Item Key="UserMessageIfClaimsTransformationBooleanValueIsNotEqual">Your account has been locked. Contact your support person to unlock it, then try again.</Item>
            <Item Key="EnforceEmailVerification">False</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="pickYourAccountText" /> <!-- the text that says "Click here to enroll" -->
            <OutputClaim ClaimTypeReferenceId="usingAuthenticator" DefaultValue="true" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-UserReadUsingEmailAddress-TOTP" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountDiscoveryUsingEmailAddress-TOTP-PasswordReset">
          <DisplayName>Reset password using Authenticator</DisplayName>
          <IncludeTechnicalProfile ReferenceId="LocalAccountDiscoveryUsingEmailAddress-TOTP" />
        </TechnicalProfile>

      </TechnicalProfiles>
    </ClaimsProvider>

    <ClaimsProvider>
      <DisplayName>Self Asserted</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="SelfAsserted-ProfileUpdate">
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="displayName" />
            <InputClaim ClaimTypeReferenceId="unregisterFromAuthenticator" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="displayName" />
            <OutputClaim ClaimTypeReferenceId="unregisterFromAuthenticator" />
          </OutputClaims>
        </TechnicalProfile>
     </TechnicalProfiles>
    </ClaimsProvider>

    <ClaimsProvider>
      <DisplayName>Authenticator</DisplayName>
      <TechnicalProfiles>
        <!-- Demo: The following technical profile registers a verification phone. -->
        <TechnicalProfile Id="Authenticator-Register">
          <DisplayName>App Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.authenticator.registration</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
            <InputClaim ClaimTypeReferenceId="strongAuthenticationAppQRCodeBitmap" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationAppCode" Required="true" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationAppQRCodeBitmap" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="Authenticator-VerifyTotpWebHook" />
          </ValidationTechnicalProfiles>
          <!--<UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-PhoneFactor" />-->
        </TechnicalProfile>
        <!-- Demo: The following technical profile asks the user to provide the TOTP code
        and run calls the validation technical profile to validate the TOTP-->
        <TechnicalProfile Id="Authenticator-Challenge">
          <DisplayName>App Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.authenticator</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationAppCode" Required="true" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationChallangeText" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="Authenticator-VerifyTotpWebHook" />
          </ValidationTechnicalProfiles>
          <!--<UseTechnicalProfileForSessionManagement ReferenceId="SSOSession-PhoneFactor" />-->
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- Demo: The following claims provider defines the REST providers. -->
    <ClaimsProvider>
      <DisplayName>REST API</DisplayName>
      <TechnicalProfiles>
        <!-- Demo: The following technical profile generates a time-based one-time password (TOTP).
        We use the technical  profile to register new user-->
        <TechnicalProfile Id="Authenticator-GenerateTotpWebHook">
          <DisplayName>Generate TOTP Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://yourwebsite.azurewebsites.net/api/identity/Generate</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="AllowInsecureAuthInProduction">true</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="userName" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationAppQRCodeBitmap" PartnerClaimType="qrCodeBitmap" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" PartnerClaimType="secretKey" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
        <!-- Demo: The following technical profile verifies a time-based one-time password (TOTP).
        We call this technical profile during registration process and sign-in process-->
        <TechnicalProfile Id="Authenticator-VerifyTotpWebHook">
          <DisplayName>Verify TOTP Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://yourwebsite.azurewebsites.net/api/identity/verify</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="AllowInsecureAuthInProduction">true</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="strongAuthenticationAppCode" PartnerClaimType="totpCode" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" PartnerClaimType="secretKey" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" PartnerClaimType="timeStepMatched" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" PartnerClaimType="timeStepMatched" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

  </ClaimsProviders>

  <UserJourneys>

    <!-- This is the default Signup/Signin user journey -->
    <UserJourney Id="SignUpOrSignIn-TOTP">
      <OrchestrationSteps>
        <!-- 
          Give the user the options to signin with userid/password or with Authenticator app.
          First time the user isn't enrolled for Authenticator and step 2 will have a hyperlink to start  
          UserJourney SignUpOrSignIn-TOTP-Enroll and set it up
        -->
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="PasswordlessUsingAuthenticatorExchange" />
            <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountSigninEmailExchange" />
          </ClaimsProviderSelections>
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- if signed in with userid/password we will already have an objectId and skip this Authenticator part -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmail" />
            <ClaimsExchange Id="PasswordlessUsingAuthenticatorExchange" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingEmailAddress-TOTP" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- common for both auth options - we read from AAD -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- if the user selectd to authenticate with Authenticator app, then challange the user-->
        <OrchestrationStep Order="4" Type="ClaimsExchange">        
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>usingAuthenticator</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthenticatorChallengeExchange" TechnicalProfileReferenceId="Authenticator-Challenge" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- if the user selectd to authenticate with Authenticator app, then update the verification timestamp -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>usingAuthenticator</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADWriteUserAppCodeByObjectId" TechnicalProfileReferenceId="AAD-WriteUserAppCodeByObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>      
        <OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>

    <!-- This is the Signup/Signin with userid/password and then Register for Authenticator user journey -->
    <UserJourney Id="SignUpOrSignIn-TOTP-Enroll">
      <OrchestrationSteps>
        <!-- must signup/signin with userid/password first -->
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountSigninEmailExchange" />
          </ClaimsProviderSelections>
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- if we don't have an objectId, we must do signup -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- read user object from AAD -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Generate a verification app secret key for the user (none interactive step) -->        
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>extension_StrongAuthenticationAppSecretKey</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthenticatorGenerateTotpWebHook" TechnicalProfileReferenceId="Authenticator-GenerateTotpWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Registers a verification app through QR code that mobile authentication app should scan -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationAppQRCodeBitmap</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthenticatorRegisterExchange" TechnicalProfileReferenceId="Authenticator-Register" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Ask the user for the TOTP during registration of the Authenticator -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationAppQRCodeBitmap</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthenticatorChallengeExchange" TechnicalProfileReferenceId="Authenticator-Challenge" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- write the the verification app time step matched to AAD -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AADWriteUserAppCodeByObjectId" TechnicalProfileReferenceId="AAD-WriteUserAppCodeByObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>        
        <OrchestrationStep Order="8" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>

    <!-- PasswordReset -->
    <UserJourney Id="PasswordReset-TOTP">
      <OrchestrationSteps>
        <!-- 
          Let the user select if to have an e-mail challange or a challange via Authenticator
          Could be that the Authenticator is gone on the phone and that isn't possible anymore
         -->
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="PasswordResetUsingEmailAddressExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="PasswordlessUsingAuthenticatorExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PasswordResetUsingEmailAddressExchange" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingEmailAddress" />
            <ClaimsExchange Id="PasswordlessUsingAuthenticatorExchange" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingEmailAddress-TOTP-PasswordReset" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- if the user selectd to authenticate with Authenticator app, then challange the user-->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>usingAuthenticator</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthenticatorChallengeExchange" TechnicalProfileReferenceId="Authenticator-Challenge" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- if the user selectd to authenticate with Authenticator app, then update the verification timestamp -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>usingAuthenticator</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADWriteUserAppCodeByObjectId" TechnicalProfileReferenceId="AAD-WriteUserAppCodeByObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>        
        <!-- let user select a new password -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="NewCredentials" TechnicalProfileReferenceId="LocalAccountWritePasswordUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="7" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>

    <!-- ProfileEdit follows the normal Signup/Signin steps as we give the user two options to sign in -->
    <UserJourney Id="ProfileEdit-TOTP">
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="PasswordlessUsingAuthenticatorExchange" />
            <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountSigninEmailExchange" />
          </ClaimsProviderSelections>
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PasswordlessUsingAuthenticatorExchange" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingEmailAddress-TOTP" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- if the user selectd to authenticate with Authenticator app, then challange the user-->
        <OrchestrationStep Order="4" Type="ClaimsExchange">        
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>usingAuthenticator</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthenticatorChallengeExchange" TechnicalProfileReferenceId="Authenticator-Challenge" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- if the user selectd to authenticate with Authenticator app, then update the verification timestamp -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>usingAuthenticator</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADWriteUserAppCodeByObjectId" TechnicalProfileReferenceId="AAD-WriteUserAppCodeByObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>   
        <!-- the profile edit page -->     
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="B2CUserProfileUpdateExchange" TechnicalProfileReferenceId="SelfAsserted-ProfileUpdate" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- remove the Authenticator registration if checkbox was checked. This is so you easily can startover and demo enrollment -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>unregisterFromAuthenticator</Value>
              <Value>false</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="UnregisterAuthentcatorExchange" TechnicalProfileReferenceId="AAD-DeleteUserAppCodeByObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>        
        <OrchestrationStep Order="8" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>

  </UserJourneys>

</TrustFrameworkPolicy>